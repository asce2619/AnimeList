/**
 * HEADER
 * File Name:   Anime Watch List Records
 * Programmer:  Jannis Saini
 * Course Code: ICS4U1-02
 * Date:        June 2, 2022
 * Description: Helps anime watchers keep track of the anime's they watch.
 *      1. They can number the order in which they watched
 *      2. They can name the anime 
 *      3. They can write down the genre
 *      4. They can mention if they completed it or not with a yes or no
 *      5. They can mention the episode number they are on or completed watching 
 * 
 *      6. They can removes an anime from the list using its name 
 * 
 *      They can sort the list by...
 *      7. Watched order 1-x
 *      8. Reverse watched order x-1
 *      9. Name a-z
 *      10. Name z-a
 *      11. Completed 
 *      12. Uncompleted 
 */

import java.util.ArrayList;
import java.util.Collections;

public class AnimeRecords extends javax.swing.JFrame {

    //Creating the ArrayList for this program
    ArrayList<animes> animeList = new ArrayList<animes>();//main array
    ArrayList<Integer> watchedOrderList = new ArrayList();//array for watch order 
    ArrayList<String> nameOrderList = new ArrayList();//array for anime name order
    
    String option;//used to sort the overall list 
    
    /**
     * Creates new form AnimeRecords
     */
    public AnimeRecords() {
        initComponents();
        
        subOutputReset();//sets subOutput TextField
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        subTitle1Label = new javax.swing.JLabel();
        watchedOrderLabel = new javax.swing.JLabel();
        animeNameAddLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        completedLabel = new javax.swing.JLabel();
        episodeLabel = new javax.swing.JLabel();
        watchedOrderInput = new javax.swing.JTextField();
        nameAddInput = new javax.swing.JTextField();
        genreInput = new javax.swing.JTextField();
        completedInput = new javax.swing.JTextField();
        episodeInput = new javax.swing.JTextField();
        completed2Label = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        subTitle2Label = new javax.swing.JLabel();
        animeNameRemoveLabel = new javax.swing.JLabel();
        nameRemoveInput = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        subOutput = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        exitButton = new javax.swing.JButton();
        sortOrder = new javax.swing.JComboBox<>();
        subTitle3Label = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 20)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 0, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Anime Watch List");
        titleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204), 2));
        getContentPane().add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 220, 60));

        subTitle1Label.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        subTitle1Label.setForeground(new java.awt.Color(0, 0, 255));
        subTitle1Label.setText("Enter your Input in the fields below to add to your Anime Watch List");
        getContentPane().add(subTitle1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        watchedOrderLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 13)); // NOI18N
        watchedOrderLabel.setForeground(new java.awt.Color(0, 204, 204));
        watchedOrderLabel.setText("Watched Order:");
        getContentPane().add(watchedOrderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        animeNameAddLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 13)); // NOI18N
        animeNameAddLabel.setForeground(new java.awt.Color(0, 204, 204));
        animeNameAddLabel.setText("Anime Name:");
        getContentPane().add(animeNameAddLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        genreLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(0, 204, 204));
        genreLabel.setText("Genre");
        getContentPane().add(genreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        completedLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 13)); // NOI18N
        completedLabel.setForeground(new java.awt.Color(0, 204, 204));
        completedLabel.setText("Completed?");
        getContentPane().add(completedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        episodeLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 13)); // NOI18N
        episodeLabel.setForeground(new java.awt.Color(0, 204, 204));
        episodeLabel.setText("Episode number:");
        getContentPane().add(episodeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, -1, -1));
        getContentPane().add(watchedOrderInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 90, -1));
        getContentPane().add(nameAddInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 264, -1));
        getContentPane().add(genreInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 264, -1));
        getContentPane().add(completedInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, 264, -1));
        getContentPane().add(episodeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 264, -1));

        completed2Label.setFont(new java.awt.Font("Tempus Sans ITC", 1, 10)); // NOI18N
        completed2Label.setForeground(new java.awt.Color(0, 204, 204));
        completed2Label.setText("Yes/No");
        getContentPane().add(completed2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        addButton.setBackground(new java.awt.Color(153, 255, 204));
        addButton.setFont(new java.awt.Font("Felix Titling", 1, 11)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 229, -1));

        subTitle2Label.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        subTitle2Label.setForeground(new java.awt.Color(0, 0, 255));
        subTitle2Label.setText("To remove from the list enter the anime's name below");
        getContentPane().add(subTitle2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, -1, -1));

        animeNameRemoveLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 13)); // NOI18N
        animeNameRemoveLabel.setForeground(new java.awt.Color(255, 102, 102));
        animeNameRemoveLabel.setText("Anime Name: ");
        getContentPane().add(animeNameRemoveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, -1, -1));
        getContentPane().add(nameRemoveInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 264, -1));

        removeButton.setBackground(new java.awt.Color(255, 102, 102));
        removeButton.setFont(new java.awt.Font("Felix Titling", 1, 11)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 229, -1));

        subOutput.setEditable(false);
        subOutput.setBackground(output.getBackground());
        subOutput.setFont(new java.awt.Font("Felix Titling", 1, 13)); // NOI18N
        subOutput.setForeground(new java.awt.Color(0, 204, 204));
        subOutput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        subOutput.setText("Your Anime Watch List :)");
        getContentPane().add(subOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 11, 420, 36));

        output.setEditable(false);
        output.setBackground(new java.awt.Color(233, 218, 218));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        output.setForeground(new java.awt.Color(102, 102, 255));
        output.setRows(5);
        output.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane2.setViewportView(output);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 53, 420, 510));

        exitButton.setBackground(new java.awt.Color(153, 204, 255));
        exitButton.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 520, 120, 40));

        sortOrder.setBackground(new java.awt.Color(0, 204, 255));
        sortOrder.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        sortOrder.setForeground(new java.awt.Color(51, 51, 255));
        sortOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Watched Order", "Reverse Watched Order", "Name A-Z", "Name Z-A", "Completed", "Uncompleted" }));
        sortOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortOrderActionPerformed(evt);
            }
        });
        getContentPane().add(sortOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 490, 262, 48));

        subTitle3Label.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        subTitle3Label.setForeground(new java.awt.Color(0, 0, 255));
        subTitle3Label.setText("Sort Your List by...");
        getContentPane().add(subTitle3Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, -1, -1));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.jpg"))); // NOI18N
        backgroundLabel.setToolTipText("");
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 580));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the GUI
     * @param evt 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Resets the subOutput TextField.
     */
    private void subOutputReset(){
        subOutput.setText("Your Anime Watch List :)");
    }
    
    /**
     * Add to the List
     * @param evt 
     * Gets user input and outputs their list into the output TextArea
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        subOutputReset();//resets subOutput TextField if it was changed
        
        animes anime;//gets the class
        
        //naming the vaiables 
        int order;
        String name, genre, completed, episode;
        
        //gets the users input
        order = Integer.parseInt(watchedOrderInput.getText());//parses the watch order into an integer as well
        name = nameAddInput.getText();
        genre = genreInput.getText();
        completed = completedInput.getText();
        //takes the users yes/no and assigns Completed or Uncompleted to the variable
        if(completed.equalsIgnoreCase("yes")){
            completed = "Completed";
        }
        else{
            completed = "Uncompleted";
        }
        episode = episodeInput.getText();
        
        //takes all the users input and adds to the main arrayList 
        anime = new animes(order, name, genre, completed, episode);
        animeList.add(anime);
        
        //takes the users order # and adds to the watchOrderList
        watchedOrderList.add(order);//will be sorted later
        //takes the user anime name and adds to the nameOrderList 
        nameOrderList.add(name);//wil be sorted later 
        
        
        //clears the TextFields to the user can just add more input without the hassle to clear them on their own
        watchedOrderInput.setText("");
        nameAddInput.setText("");
        genreInput.setText("");
        completedInput.setText("");
        episodeInput.setText("");
        
        list();//goes to the method list to print the output
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Outputs the list. 
     */
    public void list() {
        String temp="";//holds the entire output that needs to be printed 
        
        //goes through the entire animeList to print the entire list in the order the user inputed their info
        for (int x = 0; x <= animeList.size()-1; x++) {
            //adds to temp along the way for the entire output
            temp = temp + animeList.get(x).order + ". "
                    + animeList.get(x).name + " ("
                    + animeList.get(x).genre + ") ["
                    + animeList.get(x).completed + "] "
                    + animeList.get(x).episode + "\n";
        }
        output.setText(temp);//outputs the final list 
    }
  
    /**
     * Remove from the list 
     * @param evt 
     * Removes the anime of the users choice from the list 
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        subOutputReset();//resets subOutput TextField if it was changed
        
        String nameRemove;
        //gets the name of the anime the user wants to remove and saves it under nameRemove
        nameRemove = nameRemoveInput.getText();

        boolean used = false;//checks if the user entered a valid name
        
        //goes through animeList one index at a time
        for (int x = 0; x <= animeList.size()-1; x++) {
            /*
            checks the anime name at each index ignoring the case's
            if the name is the same as in nameRemove it enters the statment
            */
            if (animeList.get(x).name.equalsIgnoreCase(nameRemove)) {
                animeList.remove(x);//removes the anime from the list 
                used = true;//makes used true so user entered a proper name
            }
        }
        
        //if the user didn't enter a proper name
        if(used == false){
            subOutput.setText(nameRemove + " is not in the list please try again!");
        }
        
        //clears the TextField for the user 
        nameRemoveInput.setText("");

        list();//goes to the method list to output the new list 
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * Anime Watched Order.
     * 1-X AND X-1
     */
    public void watchOrder() {
        String temp="";
        
        //Enters a double loop//
        
        //goes through the watchOrderList with the numbers 1-x/x-1 indicated by the user previously to entering this method
        for(int i = 0; i < watchedOrderList.size(); i++){
            //saves the order# then enters the second loop 
            int check = watchedOrderList.get(i);
            
            //goes through the entire animeList 
            for (int x = 0; x <= animeList.size()-1; x++) {
                
                //if value at the index in animeList is equal to check that holds the order# program enters the statment
                if(animeList.get(x).order == check){
                    //saves the line for the list under temp
                    temp = temp + animeList.get(x).order + ". "
                    + animeList.get(x).name + " ("
                    + animeList.get(x).genre + ") ["
                    + animeList.get(x).completed + "] "
                    + animeList.get(x).episode + "\n";
                }
            }
        }
        output.setText(temp);//outputs the entire list thats already in the correct order the user wanted 
    }
    
    /**
     * Anime Name Order.
     * A-Z AND Z-A
     */
    public void nameOrder() {
        String temp="";
        
        //Enters a double loop//
        
        //goes through the nameOrderList with A-Z/Z-A indicated by the user previously to entering this method
        for(int i = 0; i < nameOrderList.size(); i++){
            //saves each names one by one in order and enters the second loop 
            String check = nameOrderList.get(i);
            
            //goes through the entire animeList 
            for (int x = 0; x <= animeList.size()-1; x++) {
                
                //if name at the index in animeList is equal to check that holds the name the program enters the statment
                if(animeList.get(x).name.equals(check)){
                    //saves the line for the list under temp
                    temp = temp + animeList.get(x).order + ". "
                    + animeList.get(x).name + " ("
                    + animeList.get(x).genre + ") ["
                    + animeList.get(x).completed + "] "
                    + animeList.get(x).episode + "\n";
                }
            }
        }
        output.setText(temp);//outputs the entire list thats already in the correct order the user wanted 
    }
     
    /**
     * Completed Order.
     * Completed OR Uncompleted 
     */
    public void completedOrder() {
        String temp="";
        
        boolean usedCompleted = false;//checks if the user has any Completed Anime
        boolean usedUncompleted = false;//checks if the user has any Uncompleted Anime
        
        //Enters a double loop//
        
        //goes through the watchOrderList in the 1-x order
        for(int i = 0; i < watchedOrderList.size(); i++){
            //saves each order # and enters the second loop 
            int check = watchedOrderList.get(i);
            
            //goes through the entire animeList
            //goes into one of the if statments each time (the user makes a choice before the program enters this method)
            for (int x = 0; x <= animeList.size() - 1; x++) {
                
                //if the user chose the order Completed 
                if (option.equals("Completed")) {
                    
                    /*
                    if the order# at animeList = check 
                    AND
                    if the animeList contains completed
                    */
                    if (animeList.get(x).order == check && animeList.get(x).completed.equalsIgnoreCase("Completed")) {
                        //saves the line for the list under temp
                        temp = temp + animeList.get(x).order + ". "
                                + animeList.get(x).name + " ("
                                + animeList.get(x).genre + ") ["
                                + animeList.get(x).completed + "] "
                                + animeList.get(x).episode + "\n";
                        
                        usedCompleted = true;//makes used true so user has Completed Anime
                    }
                }
                
                //if the user chose the order Uncompleted 
                if(option.equals("Uncompleted")){
                    
                    /*
                    if the order# at animeList = check 
                    AND
                    if the animeList contains uncompleted
                    */
                    if (animeList.get(x).order == check && animeList.get(x).completed.equalsIgnoreCase("Uncompleted")) {
                        //saves the line for the list under temp
                        temp = temp + animeList.get(x).order + ". "
                                + animeList.get(x).name + " ("
                                + animeList.get(x).genre + ") ["
                                + animeList.get(x).completed + "] "
                                + animeList.get(x).episode + "\n";
                        
                        usedUncompleted = true;//makes used true so user has Uncompleted Anime
                    }
                }
            }
        }
        
        //if the user dosent't have any Completed or Uncompleted Anime
        if(option.equals("Completed") && usedCompleted == false){
            subOutput.setText("You don't have any Completed Anime : (");
        }
        else if(option.equals("Uncompleted") && usedUncompleted == false){
            subOutput.setText("Congratulations! You have no Uncompleted Anime");
        }
        
        output.setText(temp);//outputs the entire list thats already in the correct order the user wanted 
    }
        
    /**
     * Sorts the list
     * @param evt 
     * Depends on the users choice
     */
    private void sortOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortOrderActionPerformed
        subOutputReset();//resets subOutput TextField if it was changed        

        //gets the users choice for sorting and saves it under option 
        option = sortOrder.getSelectedItem().toString();
        
        //if they chose Watched Order
        if(option.equals("Watched Order")){
            Collections.sort(watchedOrderList); //sorts watchedOrderList 1-x
            watchOrder(); //goes to the method to print in the correct order 
        }
        //if they chose Reverse Watched Order
        else if(option.equals("Reverse Watched Order")){
            Collections.sort(watchedOrderList); //sorts 1-x
            Collections.reverse(watchedOrderList); //takes the sorted 1-x and reverses it to x-1
            watchOrder();
        }
        //if they chose Name A-Z
        else if(option.equals("Name A-Z")){
            //sorts nameOrderList to A-Z ignoring the case's 
            Collections.sort(nameOrderList, String.CASE_INSENSITIVE_ORDER);
            nameOrder(); //goes to the method to print in the correct order 
        }
        //if they chose Name Z-A
        else if(option.equals("Name Z-A")){
            //sorts nameOrderList to A-Z ignoring the case's
            Collections.sort(nameOrderList, String.CASE_INSENSITIVE_ORDER);
            Collections.reverse(nameOrderList); //takes A-Z and reverses it to Z-A
            nameOrder();
        }
        //if they chose Completed
        else if(option.equals("Completed")){
            Collections.sort(watchedOrderList); //sorts 1-x
            completedOrder();
        }
        //if they Uncompleted
        else if(option.equals("Uncompleted")){
            Collections.sort(watchedOrderList); //sorts 1-x
            completedOrder();
        }
    }//GEN-LAST:event_sortOrderActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnimeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnimeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnimeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnimeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnimeRecords().setVisible(true);
            }
        });
    }
    
    /**
     * Defining the Object Class.
     */
    class animes {
        int order; 
        String name, genre, completed, episode;

        animes(int _order, String _name, String _genre, String _completed, String _episode) {
            order = _order;
            name = _name;
            genre = _genre;
            completed = _completed;
            episode = _episode;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel animeNameAddLabel;
    private javax.swing.JLabel animeNameRemoveLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel completed2Label;
    private javax.swing.JTextField completedInput;
    private javax.swing.JLabel completedLabel;
    private javax.swing.JTextField episodeInput;
    private javax.swing.JLabel episodeLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField genreInput;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameAddInput;
    private javax.swing.JTextField nameRemoveInput;
    private javax.swing.JTextArea output;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox<String> sortOrder;
    private javax.swing.JTextField subOutput;
    private javax.swing.JLabel subTitle1Label;
    private javax.swing.JLabel subTitle2Label;
    private javax.swing.JLabel subTitle3Label;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField watchedOrderInput;
    private javax.swing.JLabel watchedOrderLabel;
    // End of variables declaration//GEN-END:variables
}
